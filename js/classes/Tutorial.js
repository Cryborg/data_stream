// Classe Tutorial - G√®re le tutoriel interactif
// Guide le joueur pas √† pas dans la d√©couverte du jeu

export class Tutorial {
    constructor(game) {
        this.game = game;
        this.currentStep = 0;
        this.isActive = false;
        this.overlay = null;
        this.tooltip = null;
        this.arrow = null;

        // D√©finition des √©tapes du tutoriel
        this.steps = [
            {
                id: 'welcome',
                title: 'üß† Bienvenue dans Data Stream',
                message: `Tu incarnes une **IA naissante** qui √©tend son r√©seau de conscience.

Ton objectif : construire un r√©seau de n≈ìuds pour g√©n√©rer de la **Data** et √©voluer.

Le n≈ìud cyan au centre est ton **Core** - il g√©n√®re lentement de la Data.`,
                position: 'center',
                highlight: null,
                action: null,
                button: 'Commencer le tutoriel'
            },
            {
                id: 'resources',
                title: 'üìä Les ressources',
                message: `En haut √† droite, tu vois tes ressources :

**Data** : Ta ressource principale (tu en as ${this.game?.gameState?.data?.toFixed(0) || '10'})
**Bandwidth** : Capacit√© de ton r√©seau
**Integrity** : Stabilit√© (ne doit jamais tomber √† 0%)
**Conscience** : Points de prestige (pour plus tard)`,
                position: 'top-right',
                highlight: '.resources',
                action: null,
                button: 'Compris !'
            },
            {
                id: 'select_processor',
                title: '‚óÜ Place ton premier Processor',
                message: `Pour g√©n√©rer plus de Data, tu dois placer des **Processors**.

**Clique sur le bouton "‚óÜ Processor"** dans le panneau de droite.

Il co√ªte 10 Data et g√©n√®re 5 Data/s.`,
                position: 'right',
                highlight: '[data-node-type="PROCESSOR"]',
                action: 'selectNodeType',
                waitFor: 'nodeTypeSelected',
                button: null
            },
            {
                id: 'place_processor',
                title: 'üñ±Ô∏è Place le Processor',
                message: `Bien ! Maintenant **clique n'importe o√π sur le canvas** (zone noire avec √©toiles) pour placer ton Processor.

Place-le pr√®s du Core (n≈ìud cyan central) pour qu'ils se connectent automatiquement !`,
                position: 'left',
                highlight: '#gameCanvas',
                action: null,
                waitFor: 'nodePlaced',
                button: null
            },
            {
                id: 'observe_flow',
                title: '‚ú® Observe le flux automatique !',
                message: `Excellent ! Le Processor s'est **automatiquement connect√©** au Core !

Tu vois la ligne cyan entre les deux n≈ìuds ? C'est le **flux de donn√©es**.

Regarde bien : des petites particules voyagent le long de la connexion.

Observe aussi ta **Data** en haut √† droite : elle augmente maintenant plus vite !`,
                position: 'top-right',
                highlight: '.resource.data',
                action: null,
                button: 'Cool ! üòé'
            },
            {
                id: 'add_more',
                title: 'üéØ Construis ton r√©seau',
                message: `Tu peux maintenant :

‚Ä¢ Placer d'autres **Processors** pour g√©n√©rer plus de Data
‚Ä¢ Les **Processors servent de hubs** : les autres n≈ìuds doivent se connecter √† eux !
‚Ä¢ Ajouter des **Routers** (‚óá) connect√©s aux Processors pour r√©duire leur Bandwidth

**Astuce** : Plus la distance entre 2 n≈ìuds est grande, plus tu perds de Data !`,
                position: 'right',
                highlight: '.node-buttons',
                action: null,
                button: 'Compris !'
            },
            {
                id: 'integrity_warning',
                title: '‚ö†Ô∏è Attention √† l\'Integrity !',
                message: `Chaque n≈ìud consomme de la **Bandwidth**.

Si tu places trop de n≈ìuds, ta Bandwidth sera satur√©e et ton **Integrity** va baisser.

Si l'Integrity tombe √† 0% ‚Üí **CRASH** ‚Üí tu perds tout et recommences !

**Astuce** : Les Routers (‚óá) divisent par 2 la consommation des Processors auxquels ils sont connect√©s !`,
                position: 'top-right',
                highlight: '.resource.integrity',
                action: null,
                button: 'Not√© ! üìù'
            },
            {
                id: 'prestige',
                title: 'üåÄ Le Prestige',
                message: `Quand tu auras accumul√© beaucoup de Data (1000+), tu pourras faire un **Prestige** :

‚Ä¢ Tu red√©marres de z√©ro
‚Ä¢ Mais tu gagnes des **Fragments de Conscience**
‚Ä¢ Ces Fragments d√©bloquent des **bonus permanents**

Le Prestige est la cl√© pour progresser sur le long terme !`,
                position: 'right',
                highlight: '.panel.prestige',
                action: null,
                button: 'D\'accord !'
            },
            {
                id: 'end',
                title: 'üéâ Tutoriel termin√© !',
                message: `Tu connais maintenant les bases de Data Stream !

**Rappel des commandes** :
‚Ä¢ **Clic gauche** : Placer un n≈ìud (connexions automatiques !)
‚Ä¢ **Clic droit** : Annuler / Supprimer un n≈ìud
‚Ä¢ **Espace** : Pause
‚Ä¢ **Ctrl+S** : Sauvegarder

**Astuce** : Chaque type de n≈ìud a des effets sur les n≈ìuds voisins. Exp√©rimente !

Amuse-toi bien et que ton r√©seau prosp√®re ! üöÄ`,
                position: 'center',
                highlight: null,
                action: null,
                button: 'Let\'s go ! üéÆ'
            }
        ];

        this.checkIfTutorialNeeded();
    }

    // V√©rifie si le tutoriel a d√©j√† √©t√© fait
    checkIfTutorialNeeded() {
        const tutorialDone = localStorage.getItem('datastream_tutorial_done');
        if (!tutorialDone) {
            this.start();
        }
    }

    // D√©marre le tutoriel
    start() {
        this.isActive = true;
        this.currentStep = 0;
        this.createOverlay();
        this.showStep();
    }

    // Cr√©e l'overlay
    createOverlay() {
        // Overlay sombre
        this.overlay = document.createElement('div');
        this.overlay.id = 'tutorial-overlay';
        this.overlay.className = 'tutorial-overlay';
        document.body.appendChild(this.overlay);

        // Tooltip
        this.tooltip = document.createElement('div');
        this.tooltip.id = 'tutorial-tooltip';
        this.tooltip.className = 'tutorial-tooltip';
        document.body.appendChild(this.tooltip);

        // Fl√®che
        this.arrow = document.createElement('div');
        this.arrow.id = 'tutorial-arrow';
        this.arrow.className = 'tutorial-arrow';
        document.body.appendChild(this.arrow);
    }

    // Affiche l'√©tape courante
    showStep() {
        const step = this.steps[this.currentStep];

        // Met √† jour le tooltip
        this.tooltip.innerHTML = `
            <div class="tutorial-header">
                <h3>${step.title}</h3>
                <button class="tutorial-skip" onclick="window.game.tutorial.skip()">Passer le tutoriel</button>
            </div>
            <div class="tutorial-content">
                ${step.message.split('\n').map(line => `<p>${line}</p>`).join('')}
            </div>
            ${step.button ? `
                <div class="tutorial-footer">
                    <button class="tutorial-next" onclick="window.game.tutorial.nextStep()">${step.button}</button>
                </div>
            ` : `
                <div class="tutorial-footer">
                    <p class="tutorial-waiting">Effectue l'action demand√©e...</p>
                </div>
            `}
        `;

        // Positionne le tooltip
        this.positionTooltip(step.position);

        // Highlight l'√©l√©ment
        if (step.highlight) {
            this.highlightElement(step.highlight);
        } else {
            this.removeHighlight();
        }

        // Configure l'attente d'action
        if (step.waitFor) {
            this.waitForAction(step.waitFor);
        }

        // Fl√®che indicative
        if (step.highlight && step.position !== 'center') {
            this.showArrow(step.highlight, step.position);
        } else {
            this.hideArrow();
        }
    }

    // Positionne le tooltip
    positionTooltip(position) {
        this.tooltip.className = 'tutorial-tooltip';
        this.tooltip.classList.add(`tutorial-${position}`);
    }

    // Met en √©vidence un √©l√©ment
    highlightElement(selector) {
        this.removeHighlight();
        const element = document.querySelector(selector);
        if (element) {
            element.classList.add('tutorial-highlight');
            // Rend l'√©l√©ment cliquable m√™me avec l'overlay
            element.style.position = 'relative';
            element.style.zIndex = '10001';
        }
    }

    // Retire la mise en √©vidence
    removeHighlight() {
        document.querySelectorAll('.tutorial-highlight').forEach(el => {
            el.classList.remove('tutorial-highlight');
            if (el.style.zIndex === '10001') {
                el.style.zIndex = '';
            }
        });
    }

    // Affiche la fl√®che
    showArrow(targetSelector, direction) {
        const target = document.querySelector(targetSelector);
        if (!target) {
            this.arrow.style.display = 'none';
            return;
        }

        const rect = target.getBoundingClientRect();
        this.arrow.style.display = 'block';
        this.arrow.className = 'tutorial-arrow';

        // Positionne selon la direction
        switch(direction) {
            case 'right':
                this.arrow.classList.add('arrow-right');
                this.arrow.style.left = (rect.left - 60) + 'px';
                this.arrow.style.top = (rect.top + rect.height / 2 - 20) + 'px';
                break;
            case 'left':
                this.arrow.classList.add('arrow-left');
                this.arrow.style.left = (rect.right + 20) + 'px';
                this.arrow.style.top = (rect.top + rect.height / 2 - 20) + 'px';
                break;
            case 'top-right':
                this.arrow.classList.add('arrow-up');
                this.arrow.style.left = (rect.left + rect.width / 2 - 20) + 'px';
                this.arrow.style.top = (rect.bottom + 10) + 'px';
                break;
        }
    }

    // Cache la fl√®che
    hideArrow() {
        this.arrow.style.display = 'none';
    }

    // Attend une action du joueur
    waitForAction(actionType) {
        this.waitingFor = actionType;
    }

    // Notifie qu'une action a √©t√© effectu√©e
    notifyAction(actionType) {
        if (this.isActive && this.waitingFor === actionType) {
            this.waitingFor = null;
            setTimeout(() => this.nextStep(), 500);
        }
    }

    // Passe √† l'√©tape suivante
    nextStep() {
        this.currentStep++;
        if (this.currentStep >= this.steps.length) {
            this.end();
        } else {
            this.showStep();
        }
    }

    // Termine le tutoriel
    end() {
        this.isActive = false;
        localStorage.setItem('datastream_tutorial_done', 'true');
        this.cleanup();
        this.game.showMessage('Tutoriel termin√© ! Amuse-toi bien ! üéÆ');
    }

    // Passe le tutoriel
    async skip() {
        const confirmed = await this.game.showConfirm(
            '‚è≠Ô∏è Passer le tutoriel ?',
            'Es-tu s√ªr de vouloir passer le tutoriel ?\n\nTu peux toujours le relancer en supprimant ta sauvegarde.',
            '‚ùì'
        );

        if (confirmed) {
            this.isActive = false;
            localStorage.setItem('datastream_tutorial_done', 'true');
            this.cleanup();
            this.game.showMessage('Tutoriel pass√©. Tu peux le relancer en supprimant la sauvegarde.');
        }
    }

    // Nettoie les √©l√©ments du DOM
    cleanup() {
        this.removeHighlight();
        if (this.overlay) this.overlay.remove();
        if (this.tooltip) this.tooltip.remove();
        if (this.arrow) this.arrow.remove();
    }

    // R√©initialise le tutoriel (pour debug)
    reset() {
        localStorage.removeItem('datastream_tutorial_done');
        this.cleanup();
        this.start();
    }
}
