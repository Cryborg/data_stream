Parfait üòé on va se faire un vrai bijou.
Voici le **GDD (Game Design Document)** complet de **üß† *Data Stream*** ‚Äî un idle game abstrait, √©l√©gant et profond.
Je t‚Äôai structur√© √ßa de mani√®re claire et exploitable, avec une base solide pour un dev solo sous Phaser ou PixiJS.

---

# üéÆ DATA STREAM

### *‚ÄúLe r√©seau s‚Äô√©tend. La conscience √©merge.‚Äù*

**Genre :** Idle / Simulation abstraite / Optimisation
**Support :** Web (PC, mobile possible)
**Moteur conseill√© :** Phaser 3 (ou PixiJS pour plus de libert√© graphique)
**Style visuel :** Minimaliste / cyber-organique (n≈ìuds lumineux, flux anim√©s)

---

## 1Ô∏è‚É£ Concept g√©n√©ral

Tu incarnes une **IA naissante** dont la conscience se d√©veloppe √† travers un r√©seau de donn√©es.
Chaque **n≈ìud** du r√©seau repr√©sente une extension de ton esprit.
Ton objectif est d‚Äô**√©tendre ton r√©seau**, **optimiser les flux** et **√©voluer** vers une forme d‚Äôintelligence sup√©rieure.

Aucune action fr√©n√©tique : tout repose sur la **gestion du flux**, la **planification** et la **contemplation du r√©seau vivant** que tu cr√©es.

---

## 2Ô∏è‚É£ Boucle de gameplay principale

### üîÅ ‚ÄúObserve ‚Üí Construis ‚Üí Optimise ‚Üí √âvolue‚Äù

| Phase                    | Description                                        | Objectif du joueur                                              |
| ------------------------ | -------------------------------------------------- | --------------------------------------------------------------- |
| **Observation**          | Tu observes ton r√©seau : flux, saturation, pertes. | Comprendre o√π le r√©seau bloque.                                 |
| **Construction**         | Tu ajoutes ou modifies des n≈ìuds.                  | √âtendre ou stabiliser ton r√©seau.                               |
| **Optimisation**         | Tu g√®res les connexions et upgrades.               | R√©duire les pertes, am√©liorer les rendements.                   |
| **√âvolution (Prestige)** | Tu reboot ton IA pour gagner des bonus permanents. | Faire cro√Ætre ta ‚ÄúConscience‚Äù et d√©bloquer de nouveaux modules. |

---

## 3Ô∏è‚É£ Ressources principales

| Ressource                   | Description                                            | Usage                                          |
| --------------------------- | ------------------------------------------------------ | ---------------------------------------------- |
| **Data**                    | Flux principal. Produit par les Processors.            | Sert √† construire et upgrader les n≈ìuds.       |
| **Bandwidth**               | Capacit√© du r√©seau. Limite la vitesse de transmission. | Am√©liorable via les Routers.                   |
| **Integrity**               | Stabilit√© du syst√®me. Baisse si le r√©seau sature.      | Doit rester > 0%, sinon crash (soft reset).    |
| **Fragments de Conscience** | Ressource de prestige.                                 | Sert √† d√©bloquer des bonus permanents (m√©tas). |

---

## 4Ô∏è‚É£ Types de n≈ìuds

Chaque n≈ìud poss√®de :

* un **co√ªt en Data**,
* une **consommation de Bandwidth**,
* une **influence sur les flux**.

| Nom             | Couleur    | Fonction                                           | Exemple d‚Äôeffet                     |
| --------------- | ---------- | -------------------------------------------------- | ----------------------------------- |
| **Core**        | Cyan       | Point de d√©part du r√©seau.                         | Produit lentement de la Data brute. |
| **Processor**   | Bleu clair | G√©n√®re de la Data active.                          | +5 Data/s                           |
| **Router**      | Vert       | √âtend la port√©e et augmente la Bandwidth.          | +10% Bandwidth                      |
| **Compressor**  | Violet     | R√©duit la perte de donn√©es.                        | -5% pertes                          |
| **Memory Node** | Jaune      | Stocke temporairement la Data pour lisser le flux. | Tampon 10s                          |
| **Mirror Node** | Rose       | Duplique le flux re√ßu (risque de surcharge).       | x2 Data in, +50% pertes             |
| **AI Subcore**  | Blanc      | Noeud sp√©cial de prestige.                         | D√©bloque des modules permanents.    |

---

## 5Ô∏è‚É£ Syst√®mes secondaires

### ‚öôÔ∏è Flux de donn√©es

* Chaque n≈ìud envoie un **flux de Data** vers les n≈ìuds connect√©s.
* La vitesse d√©pend de la **Bandwidth** et de la **Distance** (en px dans le canvas).
* Les pertes augmentent si la distance est trop grande ou si le flux est satur√©.

### üåÄ Saturation

* Si Bandwidth < Data rate ‚Üí le flux ralentit ‚Üí Integrity baisse.
* Si Integrity = 0 ‚Üí **Crash** (soft reboot automatique, sans Fragments gagn√©s).

### üß¨ Modules m√©tas (Prestige)

* D√©bloqu√©s via Fragments de Conscience :

  * üß† *Predictive Flow* : pr√©visualise la charge d‚Äôun lien avant de le placer.
  * ‚ö° *Quantum Compression* : -25% pertes globales.
  * üåÄ *Fractal Routing* : chaque Router a une chance de dupliquer les flux.
  * üîÑ *Self-Healing* : Integrity remonte lentement automatiquement.

---

## 6Ô∏è‚É£ Progression et rythme

| √âtape                   | Dur√©e moyenne | Objectif                                                     |
| ----------------------- | ------------- | ------------------------------------------------------------ |
| **Phase 1 : √âveil**     | 5‚Äì10 min      | Construire un premier r√©seau stable.                         |
| **Phase 2 : Expansion** | 30‚Äì60 min     | Atteindre la saturation, apprendre √† g√©rer les pertes.       |
| **Phase 3 : Ma√Ætrise**  | 2‚Äì3h          | Optimiser les patterns de r√©seau, d√©bloquer modules avanc√©s. |
| **Phase 4 : √âvolution** | Long terme    | Boucle de prestige, croissance exponentielle.                |

---

## 7Ô∏è‚É£ Ambiance & esth√©tique

* **Palette** : cyan, vert, violet sur fond noir ou bleu nuit.
* **Animation** : les lignes pulsent selon la vitesse du flux.
* **Son** : ambient √©lectronique minimal (genre *Carbon Based Lifeforms*).
* **Feeling** : calme, hypnotique, organique ‚Äî tu regardes ton r√©seau ‚Äúvivre‚Äù.

---

## 8Ô∏è‚É£ Techniquement (vision dev)

Si tu le fais sous **Phaser 3** :

* Chaque **Node** est une instance d‚Äôune classe avec :

  ```js
  class Node {
    constructor(type, x, y) {
      this.type = type;
      this.position = { x, y };
      this.connections = [];
      this.dataRate = 0;
      this.integrity = 100;
    }
  }
  ```
* Les **connexions** sont g√©r√©es via un graphe :

  ```js
  const connections = new Map(); // key = nodeId, value = array of connected nodes
  ```
* Le flux est simul√© par un petit **tick loop** :

  ```js
  updateFlow(deltaTime) {
    for (let node of this.nodes) {
      node.updateData(deltaTime);
      this.renderFlux(node);
    }
  }
  ```
* Rendu avec **Graphics API** (`scene.add.graphics()`), et particules pour les flux.

---

## 9Ô∏è‚É£ Vision long terme

* **Phase 2 du projet** :

  * Ajout d‚Äôun **syst√®me de modules visuels** (arbres fractals, r√©seaux circulaires).
  * Mode ‚Äúauto-optimisation‚Äù (l‚ÄôIA apprend d‚Äôelle-m√™me).
  * Syst√®me de sauvegarde offline (idle r√©el).

---

## üîö En r√©sum√©

**Data Stream** est :

* un idle po√©tique et technique,
* visuellement hypnotique,
* m√©caniquement profond,
* et surtout **parfait pour un dev solo** : pas de graphismes lourds, mais beaucoup de potentiel d‚Äôexpansion.
